// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	course "backend/business/course"
	enrollments "backend/business/enrollments"
	context "context"

	mock "github.com/stretchr/testify/mock"

	student "backend/business/student"
)

// EnrollmentsRepoInterface is an autogenerated mock type for the EnrollmentsRepoInterface type
type EnrollmentsRepoInterface struct {
	mock.Mock
}

// CheckCourse provides a mock function with given fields: ctx, id
func (_m *EnrollmentsRepoInterface) CheckCourse(ctx context.Context, id uint) (course.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 course.Domain
	if rf, ok := ret.Get(0).(func(context.Context, uint) course.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(course.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckStudent provides a mock function with given fields: ctx, id
func (_m *EnrollmentsRepoInterface) CheckStudent(ctx context.Context, id uint) (student.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 student.Domain
	if rf, ok := ret.Get(0).(func(context.Context, uint) student.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(student.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnrollGetByCourseId provides a mock function with given fields: ctx, courseId
func (_m *EnrollmentsRepoInterface) EnrollGetByCourseId(ctx context.Context, courseId uint) ([]enrollments.Domain, error) {
	ret := _m.Called(ctx, courseId)

	var r0 []enrollments.Domain
	if rf, ok := ret.Get(0).(func(context.Context, uint) []enrollments.Domain); ok {
		r0 = rf(ctx, courseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]enrollments.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, courseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnrollUpdate provides a mock function with given fields: ctx, domain, studentId, courseId
func (_m *EnrollmentsRepoInterface) EnrollUpdate(ctx context.Context, domain enrollments.Domain, studentId uint, courseId uint) (enrollments.Domain, error) {
	ret := _m.Called(ctx, domain, studentId, courseId)

	var r0 enrollments.Domain
	if rf, ok := ret.Get(0).(func(context.Context, enrollments.Domain, uint, uint) enrollments.Domain); ok {
		r0 = rf(ctx, domain, studentId, courseId)
	} else {
		r0 = ret.Get(0).(enrollments.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, enrollments.Domain, uint, uint) error); ok {
		r1 = rf(ctx, domain, studentId, courseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnrollmentAdd provides a mock function with given fields: ctx, domain
func (_m *EnrollmentsRepoInterface) EnrollmentAdd(ctx context.Context, domain enrollments.Domain) (enrollments.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 enrollments.Domain
	if rf, ok := ret.Get(0).(func(context.Context, enrollments.Domain) enrollments.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(enrollments.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, enrollments.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnrollmentGetAll provides a mock function with given fields: ctx
func (_m *EnrollmentsRepoInterface) EnrollmentGetAll(ctx context.Context) ([]enrollments.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []enrollments.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []enrollments.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]enrollments.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
