// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	teacher "backend/business/teacher"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TeacherRepoInterface is an autogenerated mock type for the TeacherRepoInterface type
type TeacherRepoInterface struct {
	mock.Mock
}

// TeacherGetProfile provides a mock function with given fields: ctx, id
func (_m *TeacherRepoInterface) TeacherGetProfile(ctx context.Context, id uint) (teacher.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 teacher.Domain
	if rf, ok := ret.Get(0).(func(context.Context, uint) teacher.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(teacher.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeacherLogin provides a mock function with given fields: domain, ctx
func (_m *TeacherRepoInterface) TeacherLogin(domain teacher.Domain, ctx context.Context) (teacher.Domain, error) {
	ret := _m.Called(domain, ctx)

	var r0 teacher.Domain
	if rf, ok := ret.Get(0).(func(teacher.Domain, context.Context) teacher.Domain); ok {
		r0 = rf(domain, ctx)
	} else {
		r0 = ret.Get(0).(teacher.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(teacher.Domain, context.Context) error); ok {
		r1 = rf(domain, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeacherRegister provides a mock function with given fields: domain, ctx
func (_m *TeacherRepoInterface) TeacherRegister(domain *teacher.Domain, ctx context.Context) (teacher.Domain, error) {
	ret := _m.Called(domain, ctx)

	var r0 teacher.Domain
	if rf, ok := ret.Get(0).(func(*teacher.Domain, context.Context) teacher.Domain); ok {
		r0 = rf(domain, ctx)
	} else {
		r0 = ret.Get(0).(teacher.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*teacher.Domain, context.Context) error); ok {
		r1 = rf(domain, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeacherUpdate provides a mock function with given fields: ctx, domain, id
func (_m *TeacherRepoInterface) TeacherUpdate(ctx context.Context, domain teacher.Domain, id uint) (teacher.Domain, error) {
	ret := _m.Called(ctx, domain, id)

	var r0 teacher.Domain
	if rf, ok := ret.Get(0).(func(context.Context, teacher.Domain, uint) teacher.Domain); ok {
		r0 = rf(ctx, domain, id)
	} else {
		r0 = ret.Get(0).(teacher.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, teacher.Domain, uint) error); ok {
		r1 = rf(ctx, domain, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
