// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	student "backend/business/student"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// StudentRepoInterface is an autogenerated mock type for the StudentRepoInterface type
type StudentRepoInterface struct {
	mock.Mock
}

// GetProfile provides a mock function with given fields: ctx, id
func (_m *StudentRepoInterface) GetProfile(ctx context.Context, id uint) (student.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 student.Domain
	if rf, ok := ret.Get(0).(func(context.Context, uint) student.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(student.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: domain, ctx
func (_m *StudentRepoInterface) Login(domain student.Domain, ctx context.Context) (student.Domain, error) {
	ret := _m.Called(domain, ctx)

	var r0 student.Domain
	if rf, ok := ret.Get(0).(func(student.Domain, context.Context) student.Domain); ok {
		r0 = rf(domain, ctx)
	} else {
		r0 = ret.Get(0).(student.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(student.Domain, context.Context) error); ok {
		r1 = rf(domain, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: domain, ctx
func (_m *StudentRepoInterface) Register(domain *student.Domain, ctx context.Context) (student.Domain, error) {
	ret := _m.Called(domain, ctx)

	var r0 student.Domain
	if rf, ok := ret.Get(0).(func(*student.Domain, context.Context) student.Domain); ok {
		r0 = rf(domain, ctx)
	} else {
		r0 = ret.Get(0).(student.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*student.Domain, context.Context) error); ok {
		r1 = rf(domain, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StudentUpdate provides a mock function with given fields: ctx, domain, id
func (_m *StudentRepoInterface) StudentUpdate(ctx context.Context, domain student.Domain, id uint) (student.Domain, error) {
	ret := _m.Called(ctx, domain, id)

	var r0 student.Domain
	if rf, ok := ret.Get(0).(func(context.Context, student.Domain, uint) student.Domain); ok {
		r0 = rf(ctx, domain, id)
	} else {
		r0 = ret.Get(0).(student.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, student.Domain, uint) error); ok {
		r1 = rf(ctx, domain, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
