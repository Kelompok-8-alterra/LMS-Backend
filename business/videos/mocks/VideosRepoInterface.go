// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	modules "backend/business/modules"
	context "context"

	mock "github.com/stretchr/testify/mock"

	videos "backend/business/videos"
)

// VideosRepoInterface is an autogenerated mock type for the VideosRepoInterface type
type VideosRepoInterface struct {
	mock.Mock
}

// CheckModule provides a mock function with given fields: ctx, id
func (_m *VideosRepoInterface) CheckModule(ctx context.Context, id uint) (modules.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 modules.Domain
	if rf, ok := ret.Get(0).(func(context.Context, uint) modules.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(modules.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VideosAdd provides a mock function with given fields: ctx, domain
func (_m *VideosRepoInterface) VideosAdd(ctx context.Context, domain videos.Domain) (videos.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 videos.Domain
	if rf, ok := ret.Get(0).(func(context.Context, videos.Domain) videos.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(videos.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, videos.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VideosDelete provides a mock function with given fields: ctx, id
func (_m *VideosRepoInterface) VideosDelete(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VideosGetById provides a mock function with given fields: ctx, id
func (_m *VideosRepoInterface) VideosGetById(ctx context.Context, id uint) (videos.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 videos.Domain
	if rf, ok := ret.Get(0).(func(context.Context, uint) videos.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(videos.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VideosGetByModuleId provides a mock function with given fields: ctx, moduleId
func (_m *VideosRepoInterface) VideosGetByModuleId(ctx context.Context, moduleId uint) ([]videos.Domain, error) {
	ret := _m.Called(ctx, moduleId)

	var r0 []videos.Domain
	if rf, ok := ret.Get(0).(func(context.Context, uint) []videos.Domain); ok {
		r0 = rf(ctx, moduleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]videos.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, moduleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VideosUpdate provides a mock function with given fields: ctx, domain, id
func (_m *VideosRepoInterface) VideosUpdate(ctx context.Context, domain videos.Domain, id uint) (videos.Domain, error) {
	ret := _m.Called(ctx, domain, id)

	var r0 videos.Domain
	if rf, ok := ret.Get(0).(func(context.Context, videos.Domain, uint) videos.Domain); ok {
		r0 = rf(ctx, domain, id)
	} else {
		r0 = ret.Get(0).(videos.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, videos.Domain, uint) error); ok {
		r1 = rf(ctx, domain, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
