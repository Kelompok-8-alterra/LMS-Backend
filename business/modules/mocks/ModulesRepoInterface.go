// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	course "backend/business/course"
	context "context"

	mock "github.com/stretchr/testify/mock"

	modules "backend/business/modules"
)

// ModulesRepoInterface is an autogenerated mock type for the ModulesRepoInterface type
type ModulesRepoInterface struct {
	mock.Mock
}

// CheckCourse provides a mock function with given fields: ctx, id
func (_m *ModulesRepoInterface) CheckCourse(ctx context.Context, id uint) (course.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 course.Domain
	if rf, ok := ret.Get(0).(func(context.Context, uint) course.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(course.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModulesAdd provides a mock function with given fields: ctx, domain
func (_m *ModulesRepoInterface) ModulesAdd(ctx context.Context, domain modules.Domain) (modules.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 modules.Domain
	if rf, ok := ret.Get(0).(func(context.Context, modules.Domain) modules.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(modules.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, modules.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModulesDelete provides a mock function with given fields: ctx, id
func (_m *ModulesRepoInterface) ModulesDelete(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModulesGetAll provides a mock function with given fields: ctx
func (_m *ModulesRepoInterface) ModulesGetAll(ctx context.Context) ([]modules.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []modules.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []modules.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]modules.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModulesGetByCourseId provides a mock function with given fields: ctx, courseId
func (_m *ModulesRepoInterface) ModulesGetByCourseId(ctx context.Context, courseId uint) ([]modules.Domain, error) {
	ret := _m.Called(ctx, courseId)

	var r0 []modules.Domain
	if rf, ok := ret.Get(0).(func(context.Context, uint) []modules.Domain); ok {
		r0 = rf(ctx, courseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]modules.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, courseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModulesGetById provides a mock function with given fields: ctx, id
func (_m *ModulesRepoInterface) ModulesGetById(ctx context.Context, id uint) (modules.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 modules.Domain
	if rf, ok := ret.Get(0).(func(context.Context, uint) modules.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(modules.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModulesUpdate provides a mock function with given fields: ctx, domain, id
func (_m *ModulesRepoInterface) ModulesUpdate(ctx context.Context, domain modules.Domain, id uint) (modules.Domain, error) {
	ret := _m.Called(ctx, domain, id)

	var r0 modules.Domain
	if rf, ok := ret.Get(0).(func(context.Context, modules.Domain, uint) modules.Domain); ok {
		r0 = rf(ctx, domain, id)
	} else {
		r0 = ret.Get(0).(modules.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, modules.Domain, uint) error); ok {
		r1 = rf(ctx, domain, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
