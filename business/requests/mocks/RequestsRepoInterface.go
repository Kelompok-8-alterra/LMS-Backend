// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	course "backend/business/course"
	context "context"

	mock "github.com/stretchr/testify/mock"

	requests "backend/business/requests"

	student "backend/business/student"
)

// RequestsRepoInterface is an autogenerated mock type for the RequestsRepoInterface type
type RequestsRepoInterface struct {
	mock.Mock
}

// CheckCourse provides a mock function with given fields: ctx, id
func (_m *RequestsRepoInterface) CheckCourse(ctx context.Context, id uint) (course.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 course.Domain
	if rf, ok := ret.Get(0).(func(context.Context, uint) course.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(course.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckStudent provides a mock function with given fields: ctx, id
func (_m *RequestsRepoInterface) CheckStudent(ctx context.Context, id uint) (student.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 student.Domain
	if rf, ok := ret.Get(0).(func(context.Context, uint) student.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(student.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCoursesByTeacherId provides a mock function with given fields: ctx, teacherId
func (_m *RequestsRepoInterface) GetCoursesByTeacherId(ctx context.Context, teacherId uint) ([]course.Domain, error) {
	ret := _m.Called(ctx, teacherId)

	var r0 []course.Domain
	if rf, ok := ret.Get(0).(func(context.Context, uint) []course.Domain); ok {
		r0 = rf(ctx, teacherId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]course.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, teacherId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestGetById provides a mock function with given fields: ctx, id
func (_m *RequestsRepoInterface) RequestGetById(ctx context.Context, id uint) (requests.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 requests.Domain
	if rf, ok := ret.Get(0).(func(context.Context, uint) requests.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(requests.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestsAdd provides a mock function with given fields: ctx, domain
func (_m *RequestsRepoInterface) RequestsAdd(ctx context.Context, domain requests.Domain) (requests.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 requests.Domain
	if rf, ok := ret.Get(0).(func(context.Context, requests.Domain) requests.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(requests.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, requests.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestsGetAll provides a mock function with given fields: ctx
func (_m *RequestsRepoInterface) RequestsGetAll(ctx context.Context) ([]requests.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []requests.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []requests.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]requests.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestsGetByCourseId provides a mock function with given fields: ctx, courseId
func (_m *RequestsRepoInterface) RequestsGetByCourseId(ctx context.Context, courseId uint) ([]requests.Domain, error) {
	ret := _m.Called(ctx, courseId)

	var r0 []requests.Domain
	if rf, ok := ret.Get(0).(func(context.Context, uint) []requests.Domain); ok {
		r0 = rf(ctx, courseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]requests.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, courseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestsGetByCourseIds provides a mock function with given fields: ctx, courseIds
func (_m *RequestsRepoInterface) RequestsGetByCourseIds(ctx context.Context, courseIds []uint) ([]requests.Domain, error) {
	ret := _m.Called(ctx, courseIds)

	var r0 []requests.Domain
	if rf, ok := ret.Get(0).(func(context.Context, []uint) []requests.Domain); ok {
		r0 = rf(ctx, courseIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]requests.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []uint) error); ok {
		r1 = rf(ctx, courseIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestsGetByStudentId provides a mock function with given fields: ctx, studentId
func (_m *RequestsRepoInterface) RequestsGetByStudentId(ctx context.Context, studentId uint) ([]requests.Domain, error) {
	ret := _m.Called(ctx, studentId)

	var r0 []requests.Domain
	if rf, ok := ret.Get(0).(func(context.Context, uint) []requests.Domain); ok {
		r0 = rf(ctx, studentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]requests.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, studentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestsUpdate provides a mock function with given fields: ctx, domain, id
func (_m *RequestsRepoInterface) RequestsUpdate(ctx context.Context, domain requests.Domain, id uint) (requests.Domain, error) {
	ret := _m.Called(ctx, domain, id)

	var r0 requests.Domain
	if rf, ok := ret.Get(0).(func(context.Context, requests.Domain, uint) requests.Domain); ok {
		r0 = rf(ctx, domain, id)
	} else {
		r0 = ret.Get(0).(requests.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, requests.Domain, uint) error); ok {
		r1 = rf(ctx, domain, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
